# -*- coding: utf-8 -*-
"""Copia de Automatización de Aplicaciones.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-vRVlNBSba62EIB3bb_vd92RCppKby_z

# Automatización de aplicaciones con PyAutoGUI

PyAutoGUI es una biblioteca de Python que permite automatizar tareas repetitivas a nivel de GUI (Interfaz Gráfica de Usuario) en prácticamente cualquier sistema operativo. Proporciona funciones para controlar el mouse, el teclado e interactuar con las ventanas de las aplicaciones.

La biblioteca es multiplataforma y puede simular la entrada de teclado y mouse, tomar capturas de pantalla y localizar imágenes en la pantalla. Esto es especialmente útil para automatizar tareas repetitivas que involucran interacciones con la interfaz de usuario, como mover archivos en un sistema de archivos, rellenar formularios web, entre otros.

## Características principales

1. **Control del mouse**: PyAutoGUI permite mover el cursor del mouse a cualquier posición en la pantalla, hacer clic en las posiciones del mouse y arrastrar el mouse para seleccionar texto o mover objetos.

2. **Control del teclado**: La biblioteca puede simular la entrada del teclado. Puedes "escribir" texto, presionar teclas y combinar teclas como Ctrl+C, Ctrl+V, etc.

3. **Manejo de ventanas**: PyAutoGUI proporciona funciones para manejar ventanas de aplicaciones. Puedes traer una ventana al frente, maximizar, minimizar y mover la ventana.

4. **Reconocimiento de imágenes**: La biblioteca puede localizar una imagen dada en la pantalla, lo cual es útil para interactuar con aplicaciones cuyos controles no pueden ser accedidos por teclado o mouse.

Para instalar PyAutoGUI, simplemente usa pip:

```bash
pip install pyautogui
"""

# Primero importamos la biblioteca
import pyautogui

# Podemos obtener la resolución de la pantalla
screen_width, screen_height = pyautogui.size()
print(f"Ancho de la pantalla: {screen_width}, Altura de la pantalla: {screen_height}")

# PyAutoGUI puede mover el cursor del mouse a una posición específica en la pantalla
# Mover el cursor al centro de la pantalla
pyautogui.moveTo(screen_width / 2, screen_height / 2, duration=1)

# También podemos mover el cursor del mouse relativo a su posición actual
# Mover el cursor 100 pixels a la derecha y 50 pixels hacia abajo desde su ubicación actual
pyautogui.move(100, 50, duration=4)

# PyAutoGUI puede simular un click del mouse
# Realizar un click en la posición actual del cursor
pyautogui.click()

"""# Uso avanzado de PyAutoGUI

En este ejemplo, mostraremos cómo se pueden usar varias funciones de PyAutoGUI juntas para realizar una tarea más compleja. Vamos a realizar los siguientes pasos:

1. Obtener la posición actual del cursor del mouse.
2. Mover el cursor a una nueva ubicación.
3. Realizar un doble clic.
4. Escribir un texto.
5. Presionar la tecla Enter.
6. Tomar una captura de pantalla y guardarla en un archivo.

Este podría ser un escenario típico cuando automatizas la interacción con un formulario en una página web o una aplicación, donde tienes que hacer clic en un campo de entrada, escribir algo, presionar Enter para enviar el formulario y luego tomar una captura de pantalla para documentar los resultados.

**Nota:** Este ejemplo asume que el campo de entrada en el que quieres hacer clic está en la posición (500, 500) en la pantalla. Por favor, ajusta estas coordenadas según tus necesidades.
"""

# Importamos la biblioteca
import pyautogui

# Obtenemos y mostramos la posición actual del cursor
current_mouse_position = pyautogui.position()
print(f"Posición actual del cursor: {current_mouse_position}")

# Movemos el cursor a la posición (500, 950) y realizamos un doble clic
pyautogui.moveTo(100, 105, duration=1)
pyautogui.click()
#pyautogui.doubleClick()

pyautogui.moveTo(250, 950, duration=1)
pyautogui.click()
# Escribimos un texto
pyautogui.write('Hola, mundo!', interval=0.1)  # interval es el tiempo de espera entre cada tecla

# Presionamos la tecla Enter
pyautogui.press('enter')

# Hacemos una pausa de 2 segundos para que la aplicación pueda procesar la entrada
pyautogui.sleep(2)
# Tomamos una captura de pantalla y la guardamos en un archivo
screenshot = pyautogui.screenshot()
screenshot.save('screenshot.png')

print("Captura de pantalla guardada como screenshot.png")

"""# Automatización de Bloc de notas con PyAutoGUI

En este ejemplo, vamos a demostrar cómo PyAutoGUI puede ser utilizado para interactuar con una aplicación específica: el Bloc de notas en Windows. Este ejemplo muestra cómo se pueden utilizar combinaciones de teclas para navegar en los menús y cómo se puede utilizar la función de espera de PyAutoGUI para asegurarse de que la aplicación tenga tiempo suficiente para responder.

Por favor, ten en cuenta que este ejemplo está diseñado para funcionar en Windows y asume que tienes el Bloc de notas instalado y accesible a través del menú de inicio.

Los pasos que se van a realizar son los siguientes:

1. Presionar la tecla de Windows para abrir el menú de inicio.
2. Escribir "Bloc de notas" y presionar Enter para abrir la aplicación.
3. Escribir un texto en el Bloc de notas.
4. Guardar el archivo utilizando la combinación de teclas Ctrl+S.
5. Cerrar la aplicación utilizando la combinación de teclas Alt+F4.
"""

# Importamos la biblioteca
import pyautogui
import time

# Abrimos el menú de inicio
pyautogui.press('win')

# Esperamos un poco para que el menú de inicio se abra
time.sleep(1)

# Escribimos "Bloc de notas" y presionamos Enter para abrir la aplicación
pyautogui.write('Bloc de notas')
time.sleep(1)
pyautogui.press('enter')

# Esperamos un poco para que el Bloc de notas se abra
time.sleep(2)

# Escribimos un texto en el Bloc de notas
pyautogui.write('Hola, mundo!', interval=0.1)

# Guardamos el archivo utilizando la combinación de teclas Ctrl+S
pyautogui.hotkey('ctrl', 'g')

# Esperamos un poco para que se abra el diálogo de guardar
time.sleep(2)

# Escribimos el nombre del archivo y presionamos Enter
pyautogui.write('test1.txt')
pyautogui.press('enter')

# Cerramos la aplicación utilizando la combinación de teclas Alt+F4
pyautogui.hotkey('alt', 'f4')

"""# Reconocimiento de imágenes con PyAutoGUI

PyAutoGUI no sólo puede interactuar con la interfaz de usuario a través de las entradas de teclado y ratón, sino que también puede localizar elementos en la pantalla basándose en su apariencia. Esto es útil cuando necesitamos interactuar con elementos que no tienen una posición fija o que no pueden ser accedidos por el teclado.

En este ejemplo, vamos a demostrar cómo se puede utilizar la funcionalidad de reconocimiento de imágenes de PyAutoGUI para localizar un botón en la pantalla y hacer clic en él.

Para este ejemplo, necesitaremos una captura de pantalla del botón que queremos localizar. Esta imagen debe ser lo más parecida posible al botón tal y como aparece en la pantalla durante la ejecución del script. Además, debe ser sólo del botón, sin ningún fondo o elementos adicionales.

**Nota:** Este ejemplo asume que ya tienes una imagen del botón que quieres localizar guardada como 'button.png' en el mismo directorio que este cuaderno de Jupyter. Asegúrate de tener esta imagen antes de ejecutar el código.
"""

# Importamos la biblioteca
import pyautogui

# Intentamos localizar el botón en la pantalla
button_location = pyautogui.locateOnScreen('button.png')

if button_location is not None:
    # Si encontramos el botón, hacemos clic en él
    button_x, button_y = pyautogui.center(button_location)
    pyautogui.click(button_x, button_y)
else:
    # Si no encontramos el botón, mostramos un mensaje de error
    print("No se pudo encontrar el botón en la pantalla.")

"""# Entrada de teclado avanzada con PyAutoGUI

PyAutoGUI no sólo puede escribir texto, sino que también puede simular la mayoría de las pulsaciones de teclas que podrías hacer en un teclado físico. Esto incluye las teclas de función (F1, F2, etc.), las teclas de modificador (Shift, Alt, Ctrl, etc.) y muchas otras.

En este ejemplo, vamos a mostrar cómo se pueden emitir pulsaciones de teclas complejas con PyAutoGUI.

**Nota:** Este ejemplo no producirá ninguna salida visible, pero podrás ver los efectos de las pulsaciones de teclas si haces que el foco de entrada esté en un campo de texto mientras se ejecuta el script (por ejemplo, un editor de texto o un campo de entrada en un navegador web).
"""

# Importamos la biblioteca
import pyautogui
import time

# Esperamos 5 segundos para que puedas hacer clic en un campo de texto
print("Tienes 5 segundos para hacer clic en un campo de texto...")
time.sleep(5)

# Escribimos una cadena de texto
pyautogui.write('Hola, mundo!', interval=0.2)

# Esperamos un poco
time.sleep(1)

# Usamos la combinación de teclas para seleccionar todo el texto (Ctrl+A)
pyautogui.hotkey('ctrl', 'e')

# Usamos la combinación de teclas para copiar el texto seleccionado (Ctrl+C)
pyautogui.hotkey('ctrl', 'c')

time.sleep(2)
pyautogui.move(10, 0, duration=1)
pyautogui.click()

# Escribimos un texto en mayúsculas utilizando la tecla Shift
pyautogui.hotkey('shift', 'h', 'o', 'l', 'a')  # Esto escribirá 'HOLA'

# Usamos la combinación de teclas para pegar el texto en el portapapeles (Ctrl+V)
pyautogui.hotkey('ctrl', 'v')

# Esperamos un poco
time.sleep(2)

# Emitimos algunas pulsaciones de teclas de función
pyautogui.press('f1')

"""# Capturas de pantalla e identificación de imágenes con PyAutoGUI

PyAutoGUI también proporciona funciones para tomar capturas de pantalla y buscar imágenes dentro de esas capturas de pantalla. Esto puede ser útil para interactuar con partes de la interfaz de usuario que no se pueden controlar fácilmente con las funciones de teclado y ratón de PyAutoGUI.

En este ejemplo, vamos a tomar una captura de pantalla y luego buscar una imagen específica dentro de esa captura de pantalla. Por favor, asegúrate de tener una imagen en tu directorio para buscarla.
"""

# Importamos la biblioteca
import pyautogui

# Buscamos la ubicación de una imagen en la captura de pantalla
# Asegúrate de proporcionar el nombre correcto de archivo y la ruta a la imagen que deseas buscar
# El método `locateOnScreen` devuelve las coordenadas (x, y, ancho, alto) del primer lugar donde se encontró la imagen en la pantalla
location = pyautogui.locateOnScreen('image.png')

# Si la imagen se encontró en la captura de pantalla, imprimimos su ubicación
if location is not None:
    print(f'La imagen se encontró en la ubicación: {location}')
else:
    print('La imagen no se encontró en la captura de pantalla')

"""# Interactuando con alertas y cuadros de diálogo con PyAutoGUI

PyAutoGUI incluye varias funciones que pueden ser utilizadas para interactuar con alertas y cuadros de diálogo. En este ejemplo, veremos cómo se pueden utilizar estas funciones para proporcionar interactividad a nuestros scripts.
"""

# Importamos la biblioteca
import pyautogui

# Mostramos un cuadro de diálogo de alerta simple
pyautogui.alert('Este es un mensaje de alerta.', 'Alerta')

# Mostramos un cuadro de diálogo de confirmación y recogemos la respuesta del usuario
response = pyautogui.confirm('¿Quieres continuar?', 'Confirmación')

# Imprimimos la respuesta del usuario
print(f'El usuario seleccionó: {response}')

# Mostramos un cuadro de diálogo de entrada de texto y recogemos la entrada del usuario
text = pyautogui.prompt('¿Cuál es tu nombre?', 'Entrada')

# Imprimimos la entrada del usuario
print(f'El usuario ingresó: {text}')

# Mostramos un cuadro de diálogo de entrada de contraseña y recogemos la entrada del usuario
password = pyautogui.password('Ingresa tu contraseña.', 'Contraseña')

# Imprimimos la entrada del usuario
# En un script real, probablemente no querrías imprimir la contraseña en la consola
print(f'El usuario ingresó: {password}')

"""# Interactuando con ventanas de aplicaciones con PyAutoGUI

PyAutoGUI proporciona varias funciones que puedes usar para interactuar con las ventanas de las aplicaciones. Estas funciones pueden ser útiles para traer una aplicación al frente, cambiar el tamaño y la posición de las ventanas, y más.
"""

# Importamos la biblioteca
import pyautogui

# Obtén una lista de todas las ventanas
windows = pyautogui.getAllWindows()

# Imprime la información de cada ventana
for window in windows:
    print(window)

num=4

# Activa la primera ventana en la lista
if windows:
    windows[num].activate()

time.sleep(2)

# Cambia el tamaño y la posición de la ventana
if windows:
    windows[num].resizeTo(800, 600)
    windows[num].moveTo(100, 100)

time.sleep(2)

# Maximiza la ventana
if windows:
    windows[num].maximize()

time.sleep(2)

# Restaura la ventana a su tamaño y posición anteriores
if windows:
    windows[num].restore()

time.sleep(2)

# Minimiza la ventana
if windows:
    windows[num].minimize()

"""# Desplazamiento del ratón con PyAutoGUI

PyAutoGUI permite simular el desplazamiento del ratón, lo cual puede ser útil para interactuar con elementos de la interfaz de usuario que responden a dicha acción. Esto puede resultar útil en situaciones en las que es necesario desplazarse por un documento largo o navegar por una página web que no cabe en la pantalla.

"""

# Importamos la biblioteca
import pyautogui
import time

# Esperamos un poco
time.sleep(2)

# Desplazamos hacia arriba
pyautogui.scroll(1000)

# Esperamos un poco
time.sleep(2)

# Desplazamos hacia abajo
pyautogui.scroll(-1000)

"""# Uso de la función `dragTo` en PyAutoGUI

La función `dragTo` de PyAutoGUI permite simular el movimiento del ratón mientras se mantiene pulsado el botón del ratón. Esto puede ser útil en situaciones en las que necesitas arrastrar y soltar un elemento en la interfaz de usuario, como mover un archivo a otra ubicación.

"""

# Importamos las bibliotecas necesarias
import pyautogui
import time

# Nos aseguramos de tener el escritorio visible (ajustar el tiempo según sea necesario)
print("Tienes 5 segundos para enfocar el escritorio...")
time.sleep(5)

# Asumiendo que el archivo que quieres mover está en la posición (100, 200) en la pantalla
# Movemos el ratón hasta el archivo
pyautogui.moveTo(10, 10, duration=1)

# Hacemos clic y mantenemos pulsado el botón del ratón
pyautogui.mouseDown()

# Arrastramos el archivo a la nueva ubicación (400, 400)
pyautogui.dragTo(400, 400, duration=2)

# Soltamos el botón del ratón para soltar el archivo
pyautogui.mouseUp()

"""# Ejercicio: Automatización de tareas con Paint

En este ejercicio, tu tarea será utilizar PyAutoGUI para automatizar varias tareas en Microsoft Paint. Deberás crear un script de Python que haga lo siguiente:

1. Abre Microsoft Paint. Puedes hacer esto usando la función `pyautogui.press()` para simular la pulsación de la tecla de Windows, y luego escribir 'Paint' y presionar Enter.

2. Una vez abierto Paint, tu script debe dibujar una forma simple. Puede ser un cuadrado, un círculo, o cualquier otra forma de tu elección. Puedes hacer esto usando la función `pyautogui.moveTo()` para mover el cursor a la posición del lienzo de Paint, y luego `pyautogui.dragTo()` para dibujar la forma.

3. Después de dibujar la forma, tu script debe cambiar el color de la forma. Puedes hacer esto utilizando la función `pyautogui.click()` para seleccionar el cubo de pintura, luego seleccionar un color diferente, y finalmente hacer clic en la forma para cambiar su color.

4. Luego, tu script debe guardar la imagen. Puedes hacer esto simulando la pulsación de las teclas 'ctrl' y 's', escribiendo el nombre del archivo, y presionando Enter.

5. Finalmente, tu script debe cerrar Paint. De nuevo, puedes hacer esto simulando la pulsación de las teclas 'alt' y 'f4'.

Recuerda utilizar las funciones de pausa y las funciones `time.sleep()` de manera apropiada en tu script para evitar que se ejecute demasiado rápido. Asimismo, asegúrate de tener en cuenta la disposición de la interfaz de usuario de Paint en tu sistema operativo y ajustar la posición de los clics del ratón en consecuencia.
"""

